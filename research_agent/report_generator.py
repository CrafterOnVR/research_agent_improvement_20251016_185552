from typing import Any, Dict, List
from datetime import datetime
import logging

class ReportGenerator:
    """Generates reports for the research agent."""

    def __init__(self, agent):
        self.agent = agent

    def _generate_time_based_report(self, topic: str, research_results: Dict[str, Any]) -> str:
        """Generate comprehensive report for time-based research."""
        try:
            report_sections = []

            # Executive Summary
            report_sections.append(f"""# Time-Based Research Report: {topic}\n\n## Executive Summary\n\nThis report presents a comprehensive analysis of {topic} using a time-based research methodology:\n- **Phase 1 (1 hour)**: Initial learning to understand what the topic is\n- **Phase 2 (24 hours)**: Deep research using initial knowledge to generate intelligent questions\n\n**Research Methodology:** Time-based progressive learning\n**Intelligence Score:** {research_results.get('intelligence_score', 'N/A')}\n**Total Research Time:** 25 hours (simulated)\n\n**Key Findings:**\n- Initial learning identified {len(research_results.get('research_phases', {}).get('initial_learning', {}).get('key_concepts', []))} key concepts\n- Deep research generated {len(research_results.get('research_phases', {}).get('deep_research', {}).get('intelligent_questions', []))} intelligent questions\n- Analysis depth: Comprehensive and time-progressive\n""")

            # Initial Learning Phase
            if "initial_learning" in research_results["research_phases"]:
                initial = research_results["research_phases"]["initial_learning"]
                report_sections.append(f"""## Phase 1: Initial Learning (1 Hour)\n\n**Basic Understanding:**\n- **Keywords:** {', '.join(initial.get('basic_understanding', {}).get('keywords', [])[:10])}\n- **Key Concepts:** {', '.join(initial.get('key_concepts', [])[:10])}\n- **Entities:** {', '.join(initial.get('basic_understanding', {}).get('entities', [])[:5])}\n\n**Fundamental Questions Generated:**\n{chr(10).join([f'- {q}' for q in initial.get('fundamental_questions', [])[:8]])}\n\n**Identified Knowledge Gaps:**\n{chr(10).join([f'- {gap}' for gap in initial.get('knowledge_gaps', [])])}\n""")

            # Deep Research Phase
            if "deep_research" in research_results["research_phases"]:
                deep = research_results["research_phases"]["deep_research"]
                report_sections.append(f"""## Phase 2: Deep Research (24 Hours)\n\n**Intelligent Questions Generated:** {len(deep.get('intelligent_questions', []))}\n**Sample Questions:**\n{chr(10).join([f'- {q}' for q in deep.get('intelligent_questions', [])[:10]])}\n\n**Pattern Research Results:**\n- Central Concepts: {len(deep.get('pattern_research', {}).get('central_concepts', []))}\n- Concept Clusters: {len(deep.get('pattern_research', {}).get('concept_clusters', []))}\n- Knowledge Graph: {deep.get('pattern_research', {}).get('knowledge_graph_stats', {}).get('nodes', 0)} nodes\n\n**Automation Results:**\n- Tasks Executed: {len(deep.get('automation_results', {}).get('task_results', {}))}\n- Success Rate: {deep.get('automation_metrics', {}).get('success_rate', 0):.2%}\n""")
            
            # Advanced Insights
            if "advanced_insights" in deep:
                insights = deep["advanced_insights"]
                report_sections.append(f"""## Advanced Insights\n\n**Semantic Insights:** {len(insights.get('semantic_insights', []))}\n**Pattern Insights:** {len(insights.get('pattern_insights', []))}\n**Automation Insights:** {len(insights.get('automation_insights', []))}\n**Cross-Domain Insights:** {len(insights.get('cross_domain_insights', []))}\n\n**Key Recommendations:**\n{chr(10).join([f'- {rec}' for rec in insights.get('recommendations', [])[:5]])}\n""")

            # Conclusion
            report_sections.append(f"""## Conclusion\n\nThis time-based research approach provides a structured methodology for comprehensive topic analysis:\n\n**Phase 1 Effectiveness:** Successfully established foundational understanding\n**Phase 2 Effectiveness:** Generated deep insights using initial knowledge\n**Overall Intelligence:** {research_results.get('intelligence_score', 0):.1f}/100\n\n**Research Quality:** Time-Based Progressive Learning\n**Methodology:** 1-hour initial learning + 24-hour deep research\n**Knowledge Depth:** Comprehensive and systematic\n\n---\n*Report generated by Super Enhanced Research Agent*\n*Research Methodology: Time-Based Learning*\n*Timestamp: {datetime.now().isoformat()}*\n""")
            
            return "\n\n".join(report_sections)

        except Exception as e:
            logging.error(f"Time-based report generation failed: {e}")
            return f"Report generation failed: {e}"

    def _generate_super_intelligent_report(self, topic: str, research_results: Dict[str, Any]) -> str:
        """Generate super intelligent comprehensive report."""
        try:
            report_sections = []
            
            # Executive Summary
            report_sections.append(f"""# Super Intelligent Research Report: {topic}\n\n## Executive Summary\n\nThis report presents a comprehensive analysis of {topic} using advanced heuristic intelligence, \npattern recognition, and automated research capabilities. The research employed multiple \nintelligence layers to provide deep insights and actionable recommendations.\n\n**Research Methodology:**\n- Advanced semantic analysis\n- Pattern-based intelligence\n- Automated task execution\n- Cross-domain correlation analysis\n- Performance optimization\n\n**Key Findings:**\n- Intelligence Score: {research_results.get('intelligence_score', 'N/A')}\n- Research Phases Completed: {len(research_results.get('research_phases', {}))}\n- Analysis Depth: Super Enhanced\n""")
            
            # Topic Analysis Section
            if "topic_analysis" in research_results["research_phases"]:
                analysis = research_results["research_phases"]["topic_analysis"]
                report_sections.append(f"""## Topic Analysis\n\n**Keywords Identified:** {', '.join(analysis.get('keywords', [])[:10])}\n**Entities Found:** {', '.join(analysis.get('entities', [])[:5])}\n**Key Concepts:** {', '.join(analysis.get('concepts', [])[:5])}\n**Importance Scores:** {len(analysis.get('importance_scores', {}))} concepts ranked\n""")
            
            # Pattern Research Section
            if "pattern_research" in research_results["research_phases"]:
                pattern_research = research_results["research_phases"]["pattern_research"]
                report_sections.append(f"""## Pattern Research Results\n\n**Central Concepts:** {len(pattern_research.get('central_concepts', []))} identified\n**Concept Clusters:** {len(pattern_research.get('concept_clusters', []))} clusters found\n**Knowledge Graph:** {pattern_research.get('knowledge_graph_stats', {}).get('nodes', 0)} nodes, {pattern_research.get('knowledge_graph_stats', {}).get('edges', 0)} edges\n""")
            
            # Automation Results Section
            if "automation_results" in research_results["research_phases"]:
                automation = research_results["research_phases"]["automation_results"]
                report_sections.append(f"""## Automation Results\n\n**Tasks Executed:** {len(automation.get('task_results', {}))}\n**Success Rate:** {automation.get('automation_metrics', {}).get('success_rate', 0):.2%}\n**Average Duration:** {automation.get('automation_metrics', {}).get('average_duration', 0):.2f} seconds\n""")
            
            # Advanced Insights Section
            if "advanced_insights" in research_results["research_phases"]:
                insights = research_results["research_phases"]["advanced_insights"]
                report_sections.append(f"""## Advanced Insights\n\n**Semantic Insights:** {len(insights.get('semantic_insights', []))}\n**Pattern Insights:** {len(insights.get('pattern_insights', []))}\n**Automation Insights:** {len(insights.get('automation_insights', []))}\n**Cross-Domain Insights:** {len(insights.get('cross_domain_insights', []))}\n**Recommendations:** {len(insights.get('recommendations', []))}\n""")
            
            # Recommendations Section
            if "optimization_recommendations" in research_results["research_phases"]:
                recommendations = research_results["research_phases"]["optimization_recommendations"]
                report_sections.append(f"""## Optimization Recommendations\n\n{chr(10).join([f'- {rec}' for rec in recommendations[:10]])}\n""")
            
            # Conclusion
            report_sections.append(f"""## Conclusion\n\nThis super intelligent research analysis provides comprehensive insights into {topic} using \nadvanced heuristic intelligence, pattern recognition, and automated research capabilities. \nThe multi-layered approach ensures thorough coverage and actionable recommendations.\n\n**Research Quality:** Super Enhanced\n**Intelligence Level:** Maximum (No API Key Required)\n**Automation Level:** Advanced\n**Insight Depth:** Comprehensive\n\n---\n*Report generated by Super Enhanced Research Agent*\n*Timestamp: {datetime.now().isoformat()}*\n""")
            
            return "\n\n".join(report_sections)
        except Exception as e:
            logging.error(f"Super intelligent report generation failed: {e}")
            return f"Report generation failed: {e}"
    
    def _generate_optimization_recommendations(self, research_results: Dict[str, Any]) -> List[str]:
        """Generate optimization recommendations."""
        recommendations = []
        
        # Performance recommendations
        if "automation_results" in research_results["research_phases"]:
            automation = research_results["research_phases"]["automation_results"]
            metrics = automation.get("automation_metrics", {})
            
            if metrics.get("success_rate", 0) < 0.8:
                recommendations.append("Improve automation success rate through better error handling")
            
            if metrics.get("average_duration", 0) > 30:
                recommendations.append("Optimize task execution for faster processing")
        
        # Research depth recommendations
        if "pattern_research" in research_results["research_phases"]:
            pattern_research = research_results["research_phases"]["pattern_research"]
            
            if len(pattern_research.get("central_concepts", [])) < 5:
                recommendations.append("Expand research scope to identify more central concepts")
            
            if len(pattern_research.get("concept_clusters", [])) < 3:
                recommendations.append("Investigate cross-domain connections for better clustering")
        
        # Intelligence enhancement recommendations
        recommendations.extend([
            "Continue using super intelligent research for complex topics",
            "Leverage pattern recognition for trend analysis",
            "Utilize automation for repetitive research tasks",
            "Apply heuristic intelligence for question generation"
        ])
        
        return recommendations

    def _generate_research_recommendations(self, pattern_research: Dict[str, Any], 
                                          automation_results: Dict[str, Any]) -> List[str]:
        """Generate research recommendations."""
        recommendations = []
        
        # Pattern-based recommendations
        if "central_concepts" in pattern_research:
            concepts = pattern_research["central_concepts"][:3]
            recommendations.append(f"Focus research on central concepts: {', '.join([c[0] for c in concepts])}")
        
        # Automation-based recommendations
        if "automation_metrics" in automation_results:
            metrics = automation_results["automation_metrics"]
            if metrics.get("success_rate", 0) > 0.8:
                recommendations.append("Automation is performing well - continue using automated tasks")
            else:
                recommendations.append("Consider optimizing automation parameters")
        
        return recommendations